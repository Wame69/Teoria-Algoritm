üî• ChatGPT 4.0 & NEYROSETI GPT4:
```c#
using System;
using System.Collections.Generic;

namespace Checkers
{
    class Program
    {
        private static char[,] board = new char[8, 8];
        private static bool isWhiteTurn = true;

        private static void Main(string[] args)
        {
            InitializeBoard();

            while (true)
            {
                DisplayBoard();

                if (isWhiteTurn)
                {
                    Console.WriteLine("–•–æ–¥ –±–µ–ª—ã—Ö:");
                }
                else
                {
                    Console.WriteLine("–•–æ–¥ —á–µ—Ä–Ω—ã—Ö:");
                }

                string input = Console.ReadLine();
                if (input == "–≤—ã—Ö–æ–¥")
                {
                    break;
                }

                int[] from = ParseMove(input.Substring(0, 2));
                int[] to = ParseMove(input.Substring(3, 2));

                if (!IsValidMove(from, to))
                {
                    Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                    continue;
                }

                MakeMove(from, to);

                if (IsGameOver())
                {
                    Console.WriteLine("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
                    break;
                }

                isWhiteTurn = !isWhiteTurn;
            }
        }

        private static void InitializeBoard()
        {
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if ((i + j) % 2 == 0)
                    {
                        if (i < 3)
                        {
                            board[i, j] = 'W';
                        }
                        else if (i > 4)
                        {
                            board[i, j] = 'B';
                        }
                    }
                }
            }
        }

        private static void DisplayBoard()
        {
            Console.WriteLine("  a b c d e f g h");
            for (int i = 0; i < 8; i++)
            {
                Console.Write($"{i + 1} ");
                for (int j = 0; j < 8; j++)
                {
                    Console.Write($"{board[i, j]} ");
                }
                Console.WriteLine();
            }
        }

        private static int[] ParseMove(string move)
        {
            int fromRow = move[0] - 'a';
            int fromCol = move[1] - '1';
            return new int[] { fromRow, fromCol };
        }

        private static bool IsValidMove(int[] from, int[] to)
        {
            if (board[from[0], from[1]] == ' ')
            {
                return false;
            }

            if (isWhiteTurn && board[from[0], from[1]] == 'B')
            {
                return false;
            }

            if (!isWhiteTurn && board[from[0], from[1]] == 'W')
            {
                return false;
            }

            int diffRow = to[0] - from[0];
            int diffCol = to[1] - from[1];

            if (board[from[0], from[1]] == 'W')
            {
                if (isWhiteTurn)
                {
                    if (diffRow == -1 && (diffCol == -1 || diffCol == 1))
                    {
                        return true;
                    }
                    else if (diffRow == -2 && diffCol == -2 && board[from[0] + 1, from[1] + 1] == 'B')
                    {
                        return true;
                    }
                    else if (diffRow == -2 && diffCol == 2 && board[from[0] + 1, from[1] - 1] == 'B')
                    {
                        return true;
                    }
                }
                else
                {
                    if (board[from[0], from[1]] == 'D' && (diffRow == 1 || diffRow == -1) && (diffCol == 1 || diffCol == -1))
                    {
                        return true;
                    }
                }
            }
            else if (board[from[0], from[1]] == 'B')
            {
                if (!isWhiteTurn)
                {
                    if (diffRo

w == 1 && (diffCol == -1 || diffCol == 1))
                    {
                        return true;
                    }
                    else if (diffRow == 2 && diffCol == 2 && board[from[0] - 1, from[1] + 1] == 'W')
                    {
                        return true;
                    }
                    else if (diffRow == 2 && diffCol == -2 && board[from[0] - 1, from[1] - 1] == 'W')
                    {
                        return true;
                    }
                }
                else
                {
                    if (board[from[0], from[1]] == 'D' && (diffRow == 1 || diffRow == -1) && (diffCol == 1 || diffCol == -1))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        private static void MakeMove(int[] from, int[] to)
        {
            board[to[0], to[1]] = board[from[0], from[1]];
            board[from[0], from[1]] = ' ';

            if (isWhiteTurn && to[0] == 0)
            {
                board[to[0], to[1]] = 'W';
            }

            if (!isWhiteTurn && to[0] == 7)
            {
                board[to[0], to[1]] = 'B';
            }

            if (Math.Abs(to[0] - from[0]) == 2)
            {
                int capturedRow = (from[0] + to[0]) / 2;
                int capturedCol = (from[1] + to[1]) / 2;
                board[capturedRow, capturedCol] = ' ';
            }
        }

        private static bool IsGameOver()
        {
            bool hasWhitePieces = false;
            bool hasBlackPieces = false;

            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (board[i, j] == 'W' || board[i, j] == 'D')
                    {
                        hasWhitePieces = true;
                    }
                    else if (board[i, j] == 'B' || board[i, j] == 'D')
                    {
                        hasBlackPieces = true;
                    }
                }
            }

            return !hasWhitePieces || !hasBlackPieces;
        }
    }
}
```

–≠—Ç–æ—Ç –∫–æ–¥ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —à–∞—à–µ–∫, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –¥–∞–º–æ–∫.
