w == 1 && (diffCol == -1 || diffCol == 1))
                    {
                        return true;
                    }
                    else if (diffRow == 2 && diffCol == 2 && board[from[0] - 1, from[1] + 1] == 'W')
                    {
                        return true;
                    }
                    else if (diffRow == 2 && diffCol == -2 && board[from[0] - 1, from[1] - 1] == 'W')
                    {
                        return true;
                    }
                }
                else
                {
                    if (board[from[0], from[1]] == 'D' && (diffRow == 1 || diffRow == -1) && (diffCol == 1 || diffCol == -1))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        private static void MakeMove(int[] from, int[] to)
        {
            board[to[0], to[1]] = board[from[0], from[1]];
            board[from[0], from[1]] = ' ';

            if (isWhiteTurn && to[0] == 0)
            {
                board[to[0], to[1]] = 'W';
            }

            if (!isWhiteTurn && to[0] == 7)
            {
                board[to[0], to[1]] = 'B';
            }

            if (Math.Abs(to[0] - from[0]) == 2)
            {
                int capturedRow = (from[0] + to[0]) / 2;
                int capturedCol = (from[1] + to[1]) / 2;
                board[capturedRow, capturedCol] = ' ';
            }
        }

        private static bool IsGameOver()
        {
            bool hasWhitePieces = false;
            bool hasBlackPieces = false;

            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (board[i, j] == 'W' || board[i, j] == 'D')
                    {
                        hasWhitePieces = true;
                    }
                    else if (board[i, j] == 'B' || board[i, j] == 'D')
                    {
                        hasBlackPieces = true;
                    }
                }
            }

            return !hasWhitePieces || !hasBlackPieces;
        }
    }
}
```

Этот код учитывает все правила шашек, включая правила для дамок.
